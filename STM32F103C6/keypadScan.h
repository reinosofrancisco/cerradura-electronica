/* Main.c file generated by New Project wizard
 *
 * Created:   Tue Sep 7 2021
 * Processor: STM32F103C6
 * Compiler:  Keil for ARM
 */


#ifndef KEYPADSCANLIB_H_
#define KEYPADSCANLIB_H_
//#include <inttypes.h>
//#include <avr/io.h>


/************************************************
Librería para leer teclado matricial
	
	row/col x -> mcu pin i
	
	COL1 -> KEYPAD_PORT_Pin8
	COL2 -> KEYPAD_PORT_Pin9
	COL3 -> KEYPAD_PORT_Pin10
	COL4 -> KEYPAD_PORT_Pin11
	
	ROW1 -> KEYPAD_PORT_Pin12
	ROW2 -> KEYPAD_PORT_Pin13
	ROW3 -> KEYPAD_PORT_Pin14
	ROW4 -> KEYPAD_PORT_Pin15
	
***************************************************/
//Configuracion del puerto que usa el teclado
//Cambiar todos los define si se quiere cambiar el puerto
//*************************

/*******************************************************************
Si el Microcontrolador a Utilizar es el STM32F103C6
entonces KEYPAD_PORT0 corresponde a los pines
de la parte 'superior' del Puerto B => PB8-PB15

Accessed as a 32 bit word, with 4 bits representing the state of each pin. 
Out of these 4 bits, the low 2 bits are MODE, and high 2 bits are CNF.
BRR - Bit Reset Register
BSRR - Bit Set Reset Register

CRL/H registers essential set GPIO pin operating mode independently
KEYPAD_PORT corresponde al CRH 
(Ya que tomamos solos los pines de la parte superior del puerto B)

IDR correspoinde al Input Data Register
ODR corresponde al Output Data Register
********************************************************************/

      //PARA CAMBIAR EL PUERTO CAMBIAR GPIOx DONDE x CORRESPONDE AL PUERTO
	#define KEYPAD_PORT 		GPIOB->CRH
	#define KEYPAD_PIN_IN 	GPIOB->IDR			//Input Data Register
	#define KEYPAD_PIN_OUT 	GPIOB->ODR		//Output Data Register
	
	#define KEYPAD_PORT0 (1<<8)	
	#define KEYPAD_PORT1 (1<<9)
	#define KEYPAD_PORT2 (1<<10)
	#define KEYPAD_PORT3 (1<<11)
	#define KEYPAD_PORT4 (1<<12)
	#define KEYPAD_PORT5 (1<<13)
	#define KEYPAD_PORT6 (1<<14)
	#define KEYPAD_PORT7 (1<<15)
//*************************


//CABECERAS
void KEYPAD_Init(void);

//void delay_us (uint16_t t);

//funcion para escanear con doble verificacion y memoria
uint8_t KEYPAD_Scan (uint8_t *pkey); 


#endif /* KEYPADSCANLIB_H_ */ 

